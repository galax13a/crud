<?php
/* Starcho Livewire User_id v1.0 */

namespace App\Http\Livewire;
use Livewire\Component;
use Livewire\WithPagination;
use App\Models\{{modelName}};


class {{modelName}}s extends Component
{
    protected $listeners = ['StarchoDeleteRecord' => 'destroy', 'starcho-edit' => 'edit'];

    use WithPagination;

	protected $paginationTheme = 'bootstrap';
    public $selected_id, {{updatefield}};

    public function render()
    {

        return view('livewire.{{modelNamePluralLowerCase}}.view');
    }
	
    public function cancel()
    {
        $this->resetInput();
    }
	
    private function resetInput()
    {		{{resetfields}}
    }

    public function store() // Starcho Store
    {
        $this->validate([{{rules}}
        ]);

        {{modelName}}::create([ {{addfields}}
        ]);
        
        $this->resetInput();
        Starcho_Close($this);
        Starcho_Notify($this, 'success', __('StarchoAdmin.notify.success'));
        Starcho_TableRefresh($this);
    }

    public function edit($id) // Edit Starcho
    {
        try {
              
            $record = {{modelName}}::findOrFail($id);
            $this->selected_id = $id; {{editfields}}

         } catch (\Exception $e) {
            report($e); 
            Starcho_Notify($this, 'failure',  __('StarchoAdmin.notify.failure_select') );
            //$e->getMessage());
        }
    }

    public function update() // Starcho Update
    {
        $this->validate([{{rules}}
        ]);

        if ($this->selected_id) {
			$record = {{modelName}}::find($this->selected_id);
            $record->update([ {{addfields}}
            ]);

            Starcho_Close($this);
	        Starcho_Notify($this, 'success', __('StarchoAdmin.notify.update') . $this->name);
            $this->emit('StarchoTableRefresh');
            $this->resetInput();
        }
    }

   public function destroy($id) // Starcho destroy
    {
        if ($id) {
            {{modelName}}::where('id', $id)->delete();
             Starcho_TableRefresh($this);
        }
    }
}